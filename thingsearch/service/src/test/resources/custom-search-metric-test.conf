ditto {
  mapping-strategy.implementation = "org.eclipse.ditto.thingsearch.api.ThingSearchMappingStrategies"
  limits {
    # limiations for the "search" service
    search {
      default-page-size = 25
      # the allowed maximum page size limit - e.g. specified when doing a search via HTTP:
      # /api/1/search/things?filter=...&option=limit(0,200)
      max-page-size = 200
    }
  }
  mongodb {
    uri = "mongodb://localhost:27017/test"
    pool {
      max-size = 100
      max-wait-time = 30s
      max-wait-queue-size = 500000
    }
  }
  search {
    query {
      persistence {
        readPreference = "nearest"
        readConcern = "linearizable"
      }
    }
    query-criteria-validator = "org.eclipse.ditto.thingsearch.service.persistence.query.validation.DefaultQueryCriteriaValidator"
    search-update-mapper.implementation = "org.eclipse.ditto.thingsearch.service.persistence.write.streaming.DefaultSearchUpdateMapper"
    search-update-observer.implementation = "org.eclipse.ditto.thingsearch.service.updater.actors.DefaultSearchUpdateObserver"

    operator-metrics {
      enabled = true
      enabled = ${?THINGS_SEARCH_OPERATOR_METRICS_ENABLED}
      # by default, execute "count" metrics once every 15 minutes:
      scrape-interval = 15m
      scrape-interval = ${?THINGS_SEARCH_OPERATOR_METRICS_SCRAPE_INTERVAL}
      custom-metrics {
      }
      custom-search-metrics {
        online-status {
          enabled = true
          scrape-interval = 20m # override scrape interval, run every 20 minute
          namespaces = [
            "org.eclipse.ditto.test.1"
            "org.eclipse.ditto.test.2"
          ]
          group-by:{
            "location" = "features/Location/properties/location"
            "altitude" = "features/Location/properties/altitude"
          }
          tags: {
            "online" = "{{online_placeholder}}"
            "health" = "{{health}}"
            "hardcoded-tag" = "value"
            "location" = "{{location}}"
            "altitude" = "{{altitude}}"
          }
          filters = {
            online-filter = {
              filter = "gt(features/ConnectionStatus/properties/status/readyUntil/,{{ time:now }})"
              inline-placeholder-values = {
                // inline-placeholder-values are used to define hardcoded values to be used in the tags values if the placeholders are not json paths to an actual field in the thing
                // this is used to define different tags values based on the filter that matched the thing
                "online_placeholder" = true
                "health" = "good"
              }
            }
            offline-filter = {
              filter = "lt(features/ConnectionStatus/properties/status/readyUntil/,{{ time:now }})"
              inline-placeholder-values = {
                "online_placeholder" = false
                "health" = "bad"
              }
            }
          }
        }
      }
    }
  }
}
